{"version":3,"sources":["logo.svg","locations.js","locMarker.js","Pgraph.js","infoPane.js","world.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","locations","name","geo","LocMarker","props","color","state","isHover","toggleHover","console","log","val","setState","loc","updateWindow","toggleClick","info","style","position","backgroundColor","width","height","top","left","chosen","this","className","cx","cy","r","fill","onClick","React","Component","config","nodeHighlightBehavior","node","size","highlightStrokeColor","link","highlightColor","PGraph","id","data","Chart","index","Row","pos","sentiment","neg","posWidth","style1","style2","topic","InfoPad","count","length","itemCount","itemSize","itemData","ChartPad","apiUrl","projection","geoEqualEarth","scale","viewX","translate","viewY","WorldClass","copy","p","infoWindow","renderWindow","styles","plainData","chartButton","open","isPaneOpen","i","geographies","fetch","then","response","status","json","worlddata","feature","objects","countries","features","mode","credentials","fetched","error","timer","setInterval","clearInterval","locGraph","marginTop","viewBox","concat","toString","map","d","key","geoPath","stroke","strokeWidth","pt","renderChart","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecb6dde0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const locations = [\n  {name: 'Jakarta', geo: [106.8451,-6.2146]},\n  {name: 'Tokyo', geo: [139.839478,35.652832]},\n  {name: 'London', geo: [-0.118092,51.509865]},\n  {name: 'SÃ£o Paulo', geo: [-46.625290,-23.533773]},\n  {name: 'New York', geo: [-73.935242,40.730610]},\n  {name: 'Paris', geo: [2.349014,48.864716]},\n  {name: 'Los Angeles', geo: [-118.243683,34.052235]},\n  {name: 'Chicago', geo: [-87.65005,41.85003]},\n  {name: 'Singapore', geo: [103.851959,1.290270]},\n  {name: 'Istanbul', geo: [28.979530,41.015137]},\n  {name: 'Osaka', geo: [135.497009,34.669529]},\n  {name: 'Toronto', geo: [-79.347015,43.651070]},\n  {name: 'Madrid', geo: [-3.703790,40.416775]},\n  {name: 'Seoul', geo: [127.024612,37.532600]},\n  {name: 'Miami', geo: [-80.191788,25.761681]},\n  {name: 'Atlanta', geo: [-84.386330,33.753746]},\n  {name: 'Houston', geo: [-95.358421,29.749907]}\n];\n\nexport { locations }\n","import React from \"react\";\n\nclass LocMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loc: props.loc,\n      isHover: props.chosen\n    };\n  }\n  componentDidUpdate() {\n    console.log(\"DidUpdate...\");\n    this.state.isHover = this.props.chosen;\n  }\n  color = () => {\n    if (!this.state.isHover) {\n      return '#E91E63';\n    } else {\n      return '#a2e91e';\n    }\n  }\n\n  toggleHover = () => {\n    console.log(\"hover change...\");\n    const val = (this.state.isHover)? false:true;\n    this.setState({\n      loc: this.state.loc,\n      isHover: val\n    });\n    console.log(this.state.isHover);\n    if (!this.state.isHover) {\n      console.log(\"update loc...\");\n      this.props.updateWindow(this.props.loc, this.props.name, {});\n    } else {\n      console.log(\"reset...\");\n      this.props.updateWindow([], \"\", {});\n    }\n    console.log(this.state.isHover);\n  }\n\n  toggleClick = () => {\n    console.log(\"click change...\");\n    const val = (this.state.isHover)? false:true;\n    console.log(this.props.name + \" is \" + (val? \"chosen\":\"unchosen\"));\n    console.log(\"now \" + this.props.name + \" is \" + (this.state.isHover? \"chosen\":\"unchosen\"));\n    if (val===true) {\n      console.log(\"update loc...\");\n      this.props.updateWindow(this.props.loc, this.props.name, {});\n    } else {\n      console.log(\"reset...\");\n      this.props.updateWindow([], \"\", {});\n    }\n  }\n\n  info = () => {\n    console.log(\"return infoPad...\");\n    const styles = {position: 'absolute', backgroundColor: 'black', width: 100, height: 100, top: 0, left: 0};\n      return (\n        <div style={styles}>\n        </div>\n      );\n  }\n\n  render() {\n    return (\n          <g className=\"markers\">\n            {}\n            <circle\n            cx={ this.state.loc[0] }\n            cy={ this.state.loc[1] }\n            r={ 10 }\n            fill={this.props.color}\n            className=\"marker\"\n            onClick={this.toggleClick}\n            />\n          </g>\n    );\n  }\n}\n\nexport { LocMarker }\n","import React from \"react\";\nimport { Graph } from 'react-d3-graph';\n\nconst config = {\n  nodeHighlightBehavior: true,\n  node: {\n    size: 360,\n    highlightStrokeColor: 'blue'\n  },\n  link: {\n    highlightColor: 'lightblue'\n  }\n};\n\nclass PGraph extends React.Component {\n  render() {\n    return (\n      <Graph\n        id={this.props.id}\n        data={this.props.data}\n        config={config}\n      />\n    );\n  }\n}\n\nexport { PGraph }\n","import React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport './padStyle.css';\nimport { PGraph } from \"./Pgraph.js\";\n\nconst left = 6;\nconst width = 108;\nconst top = 20;\nconst height = 5;\nconst posColor = \"#9ad67e\";\nconst negColor = \"#d93016\";\n\n\nconst data = {\n  nodes: [\n    {id: 'Harry'},\n    {id: 'Sally'},\n    {id: 'Alice'}\n  ],\n  links: [\n    {source: 'Harry', target: 'Sally'},\n    {source: 'Harry', target: 'Alice'},\n  ]\n};\n\n\n\nconst Chart = props => {\n  const {data, index, style} = props;\n  return (\n    <div className={index%2 === 0? \"RowEven\":\"RowOdd\"} style={style}>\n      <PGraph \n        id={\"test1\"}\n        data={data}\n      />\n    </div>\n  );\n}\n\nconst Row = props => {\n  const { data, index, style } = props;\n  let pos = data[index].sentiment[1];\n  let neg = -data[index].sentiment[2];\n  if (pos===0 && neg===0) {\n    pos = 0.5;\n    neg = 0.5;\n  }\n  const posWidth = (pos/(pos+neg)) * width;\n  const negWidth = width - posWidth;\n\n  const style1 = {position: 'absolute', left: left, top: 20, width: posWidth, height: 5, backgroundColor: posColor };\n  const style2 = {position: 'absolute', left: left+posWidth, top: 20, width: negWidth, height: 5, backgroundColor: negColor};\n  const style3 = {position: 'absolute', top: 5};\n\n  return (\n    <div className={index % 2 === 0 ? \"RowEven\" : \"RowOdd\"} style={style}>\n      <div style={style3}>{data[index].topic}</div>\n      <div style={style1}></div>\n      <div style={style2}></div>\n    </div>\n  )\n};\n \nclass InfoPad extends React.Component {\n  render() {\n    const count = this.props.data.length;\n    const height = (count*35>150)? 150:count*35;\n    return (\n      <List\n        height={height}\n        itemCount={count}\n        itemSize={35}\n        width={120}\n        itemData={this.props.data}\n      >\n        {Row}\n      </List>\n    );\n  }\n}\n\n\nclass ChartPad extends React.Component {\n  render() {\n    return (\n      <List\n        height={500}\n        itemCount={1}\n        itemSize={500}\n        width={500}\n        itemData={this.props.data}\n      >\n        {Chart}\n      </List>\n    );\n  }\n}\n\nexport { InfoPad, ChartPad }\n","import React from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport { locations } from \"./locations.js\";\nimport { LocMarker } from \"./locMarker.js\";\nimport { InfoPad, ChartPad } from \"./infoPane.js\";\nimport \"konva/lib/shapes/Rect\";\nimport \"konva/lib/shapes/Text\";\nimport \"konva/lib/shapes/Circle\";\nimport \"konva/lib/shapes/Line\";\n\nconst viewX = 1200;\nconst viewY = 675;\nconst updatePeriod = 10 * 1000;\nconst apiUrl = 'https://hw1-jl5255.appspot.com/';\n\nconst projection = geoEqualEarth()\n  .scale(viewX/5)\n  .translate([ viewX / 2, viewY / 2 ]);\n\n\nclass WorldClass extends React.Component {\n  constructor(props) {\n    super(props);\n    let chosen = {};\n    let i = 0;\n    for (i=0; i<locations.length; ++i) {\n      chosen[locations[i].name] = false;\n    }\n    this.state = {\n      geographies: [],\n      chosen: chosen,\n      infoWindow: {\n        loc: [],\n        name: \"\",\n      },\n      data: {},\n      isPaneOpen: false\n    };\n    /*\n    Loading world map data\n    */\n    fetch(\"/world-110m.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n        }\n        response.json().then(worlddata => {\n          this.setState({\n            geographies: (feature(worlddata, worlddata.objects.countries).features),\n            chosen: this.state.chosen,\n            infoWindow: this.state.infoWindow,\n            data: this.state.data,\n            isPaneOpen: this.state.isPaneOpen\n          });\n        })\n      });\n    /*\n    Fetching the initial location/topic data\n    */\n    try {\n      console.log(\"trying...\");\n      fetch(apiUrl, {mode: 'cors', credentials: 'same-origin'})\n        .then(response => {\n          if (response.status !== 200) {\n            console.log(\"failed...\");\n            console.log(response);\n          }\n          response.json().then(fetched => {\n            console.log(fetched);\n            this.state.data = fetched;\n          })\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  componentDidMount() {\n    /*fetch(\"http://localhost:5000/search\", {\n      method: 'POST',\n      body: JSON.stringify({'text': \"test echo...\"})\n    }).then(response => {\n      console.log(response);\n      if (response.status !== 200) {\n        console.log(\"failed echo...\");\n      }\n      response.json().then(data => {\n        console.log(data);\n      })\n    })*/\n    this.timer = setInterval(() => {\n      try {\n        console.log(\"trying...\");\n        fetch(apiUrl, {mode: 'cors', credentials: 'same-origin'})\n          .then(response => {\n            if (response.status !== 200) {\n              console.log(\"failed...\");\n              console.log(response);\n            }\n            console.log(response);\n            response.json().then(fetched => {\n              console.log(fetched);\n              const copy = {...this.state};\n              copy.data = fetched;\n              this.setState(copy);\n            })\n          });\n      } catch (error) {\n        console.log(error);\n      }\n    }, updatePeriod);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  updateWindow = (loc, name, data) => {\n    console.log(\"showing \" + name + \"...\");\n    const copy = {...this.state};\n    for (const p in copy.chosen) {\n      copy.chosen[p] = false;\n    }\n    if (name !== \"\") {\n      copy.chosen[name] = true;\n    }\n    copy.infoWindow.loc = loc;\n    copy.infoWindow.name = name;\n    copy.infoWindow.data = data;\n    this.setState(copy);\n  }\n\n  renderWindow = () => {\n    if (this.state.infoWindow.name!==\"\") {\n      const styles = {\n        position: 'absolute',\n        top: this.state.infoWindow.loc[1] + 32,\n        left: this.state.infoWindow.loc[0] + 12,\n        backgroundColor: '#f5f2e9'\n      };\n      console.log(\"return info...\");\n      const name = this.state.infoWindow.name;\n      let data = this.state.data.plainData[name];\n      if (!data) {\n        data = [{'topic': 'No Data', 'sentiment': [0, 0.5, -0.5]}];\n      }\n      return (\n        <div style={styles}>\n          <p>{name}</p>\n          <InfoPad data={data}/>\n        </div>\n      );\n    } else {\n      console.log(\"return none...\");\n      return null;\n    }\n  }\n  \n  renderChart() {\n    console.log(this.state.isPaneOpen);\n    if (this.state.isPaneOpen) {\n      const styles = {\n        position: 'absolute',\n        top: 25,\n        left: 5,\n        backgroundColor: '#f5f2e9'\n      };\n      return (\n        <div style={styles}>\n          <ChartPad\n            data={this.state.data.locGraph}\n          />\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  chartButton = () => {\n    let copy = {...this.state};\n    const open = this.state.isPaneOpen? false : true;\n    copy.isPaneOpen = open;\n    this.setState(copy);\n  }\n\n  render() {\n    return (\n        <div style={{position: 'relative'}}>\n          <div style={{ marginTop: '32px', top: 10, left: 10, width:150 }}>\n            <button onClick={ this.chartButton }>\n            ......\n            </button>\n          </div>\n          <svg width={ viewX } \n              height={ viewY } \n              viewBox={\"0 0 \".concat(viewX.toString(10), \" \", viewY.toString(10))}\n              >\n              <g className=\"countries\">\n                {\n                  this.state.geographies.map((d,i) => (\n                    <path\n                    key={ `path-${ i }` }\n                    d={ geoPath().projection(projection)(d) }\n                    className=\"country\"\n                    fill={ `rgba(38,50,56,${ 1 / this.state.geographies.length * i})` }\n                    stroke=\"#FFFFFF\"\n                    strokeWidth={ 0.5 }\n                    />\n                  ))\n                }\n              </g>\n              { locations.map((pt) => (\n                <LocMarker \n                updateWindow={this.updateWindow} \n                loc={projection(pt.geo)} \n                color={this.state.chosen[pt.name]? '#A2E91E':'#E91E63' }\n                name={pt.name}\n                chosen={this.state.chosen[pt.name]}\n                /> )) }\n          </svg>\n          { this.renderWindow() }\n          { this.renderChart() }\n        </div>\n        )\n      }\n  }\n\nexport { WorldClass }\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { WorldClass } from './world.js';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <p className=\"App-intro\">\n          Twitter Sentiment by Location / Topic\n        </p>\n        <WorldClass />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}